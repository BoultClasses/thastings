 @inproceedings{Agrawal_Rahman_Krishna_Sobran_Menzies_2018, place={New York, NY, USA}, series={ICSE-SEIP ’18}, title={We Don’T Need Another Hero?: The Impact of “Heroes” on Software Development}, ISBN={978-1-4503-5659-6}, url={http://doi.acm.org/10.1145/3183519.3183549}, DOI={10.1145/3183519.3183549}, abstractNote={A software project has “Hero Developers” when 80% of contributions are delivered by 20% of the developers. Are such heroes a good idea? Are too many heroes bad for software quality? Is it better to have more/less heroes for different kinds of projects? To answer these questions, we studied 661 open source projects from Public open source software (OSS) Github and 171 projects from an Enterprise Github. We find that hero projects are very common. In fact, as projects grow in size, nearly all projects become hero projects. These findings motivated us to look more closely at the effects of heroes on software development. Analysis shows that the frequency to close issues and bugs are not significantly affected by the presence of heroes or project type (Public or Enterprise). Similarly, the time needed to resolve an issue/bug/enhancement is not affected by heroes or project type. This is a surprising result since, before looking at the data, we expected that increasing heroes on a project will slow down how fast that project reacts to change. However, we do find a statistically significant association between heroes, project types, and enhancement resolution rates. Heroes do not affect enhancement resolution rates in Public projects. However, in Enterprise projects, heroes increase the rate at which projects complete enhancements. In summary, our empirical results call for a revision of a long-held truism in software engineering. Software heroes are far more common and valuable than suggested by the literature, particularly for medium to large Enterprise developments. Organizations should reflect on better ways to find and retain more of these heroes.}, booktitle={Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice}, publisher={ACM}, author={Agrawal, Amritanshu and Rahman, Akond and Krishna, Rahul and Sobran, Alexander and Menzies, Tim}, year={2018}, pages={245–253}, collection={ICSE-SEIP ’18} }
 @inproceedings{Balaban_Sturm_2018, place={New York, NY, USA}, series={ICSE-SEET ’18}, title={Software Engineering Lab: An Essential Component of a Software Engineering Curriculum}, ISBN={978-1-4503-5660-2}, url={http://doi.acm.org/10.1145/3183377.3183395}, DOI={10.1145/3183377.3183395}, abstractNote={The goal of Software Engineering (SE) education is to teach theory and practice of software sciences, with an ultimate practical goal. Quite surprisingly, although standard SE programs include many hands-on courses, they do not include practical lab courses in software development and maintenance, as common in other engineering disciplines. A capstone project course, that is standard in most SE programs, cannot function as an instructive SE-lab course since it does not enable effective teaching and cannot replace a planned SE-development experiment. This paper describes an SE-lab course that creates lab conditions, where students are faced with a deliberately challenging, planned SE development and management tasks, and the course staff provides team-based guidance. The paper analyzes the lab ideals, principles and goals, explains how they are realized in the lab content, and presents its evaluation from the students and the instructors’ viewpoints.}, booktitle={Proceedings of the 40th International Conference on Software Engineering: Software Engineering Education and Training}, publisher={ACM}, author={Balaban, Mira and Sturm, Arnon}, year={2018}, pages={21–30}, collection={ICSE-SEET ’18} }
 @inproceedings{Barn_Barn_2018, place={Gothenburg, Sweden}, title={Towards a unified conceptual model for surveillance theories}, ISBN={978-1-4503-5661-9}, url={https://doi.org/10.1145/3183428.3183429}, abstractNote={The erosion of values such as privacy can be a critical factor in preventing the acceptance of new innovative technology especially in challenging environments such as the criminal justice system. Erosion of privacy happens through either deliberate or inadvertent surveillance. Since Bentham’s original liberal project in the 1900s, a literature and a whole study area around theories of surveillance has developed. Increasingly this general body of work has focussed on the role of information technology as a vehicle for surveillance activity. Despite an abundance of knowledge, a uni!ed view of key surveillance concepts that is useful to designers of information systems in preventing or reducing unintended surveillance remains elusive. This paper contributes a conceptual model that synthesises the gamut of surveillance theories as a !rst step to a theory building effort for use by Information Systems professionals. The model is evaluated using a design science research paradigm using data from both examples of surveillance and a recently completed research project that developed technology for the UK youth justice system.}, booktitle={ICSE-SEIS’18: Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Society Track}, publisher={ACM}, author={Barn, Balbir and Barn, Ravinder}, year={2018}, month={Feb} }
 @inproceedings{Hu_Song_Gehringer_2018, place={New York, NY, USA}, series={ICSE-SEET ’18}, title={Open-source Software in Class: Students’ Common Mistakes}, ISBN={978-1-4503-5660-2}, url={http://doi.acm.org/10.1145/3183377.3183394}, DOI={10.1145/3183377.3183394}, abstractNote={Introducing Open Source Software (OSS) projects into a software-engineering course has many advantages, for instance, allowing students to learn good coding practices from real-world projects, and giving students a glimpse of a real project. However, it is not easy for instructors to induce one or more OSS core teams to lend support for course projects. The alternative is to have students work on “toy features”---features for these projects not specified by OSS core teams, but by teaching staff. However, the project may be unimportant to the OSS project or may disrupt its design, making those code contributions unlikely to be integrated into the OSS code repository. In this paper, we, as both teaching staff and the core team for one OSS project called Expertiza, discuss our experience in supporting 700 students on 313 OSS-based course projects in the past five years. We manually checked these course projects, and summarize 13 common mistakes that frequently occur in students’ contributions, such as not following the existing design or messy pull requests. We propose five suggestions to help students reduce the frequency of common mistakes and improve the quality of their OSS pull requests.}, booktitle={Proceedings of the 40th International Conference on Software Engineering: Software Engineering Education and Training}, publisher={ACM}, author={Hu, Zhewei and Song, Yang and Gehringer, Edward F.}, year={2018}, pages={40–48}, collection={ICSE-SEET ’18} }
 @inproceedings{Klotins_Unterkalmsteiner_Chatzipetrou_Gorschek_Prikladnicki_Tripathi_Pompermaier_2018, place={New York, NY, USA}, series={ICSE-SEIP ’18}, title={Exploration of Technical Debt in Start-ups}, ISBN={978-1-4503-5659-6}, url={http://doi.acm.org/10.1145/3183519.3183539}, DOI={10.1145/3183519.3183539}, abstractNote={Context: Software start-ups are young companies aiming to build and market software-intensive products fast with little resources. Aiming to accelerate time-to-market, start-ups often opt for ad-hoc engineering practices, make shortcuts in product engineering, and accumulate technical debt. Objective: In this paper we explore to what extent precedents, dimensions and outcomes associated with technical debt are prevalent in start-ups. Method: We apply a case survey method to identify aspects of technical debt and contextual information characterizing the engineering context in start-ups. Results: By analyzing responses from 86 start-up cases we found that start-ups accumulate most technical debt in the testing dimension, despite attempts to automate testing. Furthermore, we found that start-up team size and experience is a leading precedent for accumulating technical debt: larger teams face more challenges in keeping the debt under control. Conclusions: This study highlights the necessity to monitor levels of technical debt and to preemptively introduce practices to keep the debt under control. Adding more people to an already difficult to maintain product could amplify other precedents, such as resource shortages, communication issues and negatively affect decisions pertaining to the use of good engineering practices.}, booktitle={Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice}, publisher={ACM}, author={Klotins, Eriks and Unterkalmsteiner, Michael and Chatzipetrou, Panagiota and Gorschek, Tony and Prikladnicki, Rafael and Tripathi, Nirnaya and Pompermaier, Leandro Bento}, year={2018}, pages={75–84}, collection={ICSE-SEIP ’18} }
 @inproceedings{Knobloch_Kaltenbach_Bruegge_2018, place={New York, NY, USA}, series={ICSE-SEET ’18}, title={Increasing Student Engagement in Higher Education Using a Context-aware Q&A Teaching Framework}, ISBN={978-1-4503-5660-2}, url={http://doi.acm.org/10.1145/3183377.3183389}, DOI={10.1145/3183377.3183389}, abstractNote={Modeling in Software Engineering is a complex task which includes interaction and discussion. Often multiple iterations are needed to end up with a satisfying design to handle given problems like complexity or change. This behavior can also be seen in education in software engineering, where learners tend to iterate over their models after having multiple discussions with their instructors or peers about possible solutions. This is an important part of the learning process, however, it is increasingly harder to implement for large scale on campus courses due to high student to lecturer ratios. One of the biggest problems is that lecturers are not able to allocate their time during class to support all students equally. This issue leads to new teaching methodologies and automated or semi-automated tools to support in-class interaction of students. However, these tools are lacking an automated mapping between questions asked and the teaching context provided. This context has to be inserted manually or is implicitly available during the lecture, however is lost after the lecture is over. In this paper we describe the adaption of a lecture-style instruction and the introduction of a context-aware Q&A teaching framework to increase student interaction by parallelizing it with content delivery. We achieve this while also lowering barriers for students to participate, even in multi-classroom setups. The stated approach also allows the creation of a knowledge repository which persists student interaction including its teaching context. This repository can be used by students to prepare for upcoming exams as well as by instructors to optimize their teaching content. Using our approach, we are able to show that there is an increase in student participation, leading to increased student examination performance for active students.}, booktitle={Proceedings of the 40th International Conference on Software Engineering: Software Engineering Education and Training}, publisher={ACM}, author={Knobloch, Jan and Kaltenbach, Jonas and Bruegge, Bernd}, year={2018}, pages={136–145}, collection={ICSE-SEET ’18} }
 @inproceedings{Kononenko_Rose_Baysal_Godfrey_Theisen_de Water_2018, title={Studying pull request merges: a case study of shopify’s active merchant}, ISBN={978-1-4503-5659-6}, url={http://dl.acm.org/citation.cfm?id=3183519.3183542}, DOI={10.1145/3183519.3183542}, publisher={ACM}, author={Kononenko, Oleksii and Rose, Tresa and Baysal, Olga and Godfrey, Michael and Theisen, Dennis and de Water, Bart}, year={2018}, month={May}, pages={124–133} }
 @inproceedings{Li_Chen_Hassan_Nasser_Flora_2018, place={New York, NY, USA}, series={ICSE-SEIP ’18}, title={Adopting Autonomic Computing Capabilities in Existing Large-scale Systems: An Industrial Experience Report}, ISBN={978-1-4503-5659-6}, url={http://doi.acm.org/10.1145/3183519.3183544}, DOI={10.1145/3183519.3183544}, abstractNote={In current DevOps practice, developers are responsible for the operation and maintenance of software systems. However, the human costs for the operation and maintenance grow fast along with the increasing functionality and complexity of software systems. Autonomic computing aims to reduce or eliminate such human intervention. However, there are many existing large systems that did not consider autonomic computing capabilities in their design. Adding autonomic computing capabilities to these existing systems is particularly challenging, because of 1) the significant amount of efforts that are required for investigating and refactoring the existing code base, 2) the risk of adding additional complexity, and 3) the difficulties for allocating resources while developers are busy adding core features to the system. In this paper, we share our industrial experience of re-engineering autonomic computing capabilities to an existing large-scale software system. Our autonomic computing capabilities effectively reduce human intervention on performance configuration tuning and significantly improve system performance. In particular, we discuss the challenges that we encountered and the lessons that we learned during this re-engineering process. For example, in order to minimize the change impact to the original system, we use a variety of approaches (e.g., aspect-oriented programming) to separate the concerns of autonomic computing from the original behaviour of the system. We also share how we tested such autonomic computing capabilities under different conditions, which has never been discussed in prior work. As there are numerous large-scale software systems that still require expensive human intervention, we believe our experience provides valuable insights to software practitioners who wish to add autonomic computing capabilities to these existing large-scale software systems.}, booktitle={Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice}, publisher={ACM}, author={Li, Heng and Chen, Tse-Hsun (Peter) and Hassan, Ahmed E. and Nasser, Mohamed and Flora, Parminder}, year={2018}, pages={1–10}, collection={ICSE-SEIP ’18} }
